{"version":3,"file":"static/js/334.096e2907.chunk.js","mappings":"6OACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA4E,oB,SCkD5E,EA1Ca,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,oGACOC,MAAM,GAAD,OATpB,uCASoB,OACfP,EADe,4BAVhB,mCAUgB,oBADZ,cACVQ,EADU,gBAIGA,EAASC,OAJZ,OAIdD,EAJc,OAKdJ,EAAQI,EAASL,MALH,2CAAH,qDAQbG,GACD,GAAE,CAACN,IAEGG,GAAQA,EAAKO,OAAS,GAC3B,eAAIC,UAAWC,EAAf,SACGT,EAAKU,KAAI,SAAAC,GACR,OACE,gBAAmBH,UAAWC,EAA9B,WACE,gBACEG,IACED,EAAME,aAAN,UAzBA,mCAyBA,OACiBF,EAAME,c,6nHAGzBC,IAAKH,EAAMI,QAEb,iBAAKP,UAAWC,EAAhB,WACE,wBAAKE,EAAMI,QACX,kCAAUJ,EAAMK,kBAXXL,EAAMM,GAelB,OAGH,0CAEH,C,sBCjDD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"item\":\"Cast_item__a0CDL\",\"actor\":\"Cast_actor__tWtXy\"};","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport css from 'components/Cast/Cast.module.css';\nimport imagePlug from 'img/blank.png';\n\nconst API_KEY = 'db09f9e57e28be6797f7d8ba986a8c6d';\nconst URL = 'https://api.themoviedb.org/3/movie/';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    const getCast = async () => {\n      let response = await fetch(\n        `${URL}${movieId}/credits?api_key=${API_KEY}&language=en-US`\n      );\n      response = await response.json();\n      setCast(response.cast);\n    };\n\n    getCast();\n  }, [movieId]);\n\n  return cast && cast.length > 0 ? (\n    <ul className={css.list}>\n      {cast.map(actor => {\n        return (\n          <li key={actor.id} className={css.item}>\n            <img\n              src={\n                actor.profile_path\n                  ? `${IMG_URL}${actor.profile_path}`\n                  : imagePlug\n              }\n              alt={actor.name}\n            ></img>\n            <div className={css.actor}>\n              <h3>{actor.name}</h3>\n              <p>Role: {actor.character}</p>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  ) : (\n    <p>No Information.</p>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","cast","setCast","useEffect","getCast","fetch","response","json","length","className","css","map","actor","src","profile_path","alt","name","character","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}